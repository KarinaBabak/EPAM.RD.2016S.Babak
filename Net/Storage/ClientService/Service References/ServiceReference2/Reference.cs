//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientService.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IUserServiceContract")]
    public interface IUserServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/Add", ReplyAction="http://tempuri.org/IUserServiceContract/AddResponse")]
        void Add(UserStorage.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/Add", ReplyAction="http://tempuri.org/IUserServiceContract/AddResponse")]
        System.Threading.Tasks.Task AddAsync(UserStorage.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/Delete", ReplyAction="http://tempuri.org/IUserServiceContract/DeleteResponse")]
        void Delete(UserStorage.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/Delete", ReplyAction="http://tempuri.org/IUserServiceContract/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(UserStorage.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/SearchForUser", ReplyAction="http://tempuri.org/IUserServiceContract/SearchForUserResponse")]
        int[] SearchForUser(System.Predicate<UserStorage.User> criteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServiceContract/SearchForUser", ReplyAction="http://tempuri.org/IUserServiceContract/SearchForUserResponse")]
        System.Threading.Tasks.Task<int[]> SearchForUserAsync(System.Predicate<UserStorage.User> criteria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceContractChannel : ClientService.ServiceReference2.IUserServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceContractClient : System.ServiceModel.ClientBase<ClientService.ServiceReference2.IUserServiceContract>, ClientService.ServiceReference2.IUserServiceContract {
        
        public UserServiceContractClient() {
        }
        
        public UserServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(UserStorage.User user) {
            base.Channel.Add(user);
        }
        
        public System.Threading.Tasks.Task AddAsync(UserStorage.User user) {
            return base.Channel.AddAsync(user);
        }
        
        public void Delete(UserStorage.User user) {
            base.Channel.Delete(user);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(UserStorage.User user) {
            return base.Channel.DeleteAsync(user);
        }
        
        public int[] SearchForUser(System.Predicate<UserStorage.User> criteria) {
            return base.Channel.SearchForUser(criteria);
        }
        
        public System.Threading.Tasks.Task<int[]> SearchForUserAsync(System.Predicate<UserStorage.User> criteria) {
            return base.Channel.SearchForUserAsync(criteria);
        }
    }
}
